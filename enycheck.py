import os
import json
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

# === –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ===
TOKEN = "8308954991:AAHHxvfa7MNIenH9L3xPG4jE7D9k9k2n0QA"
ADMINS = [955218726]

STUDENTS_FILE = "students.json"
SCHEDULE_FILE = "schedule.json"
BELLS_FILE = "bells.json"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# === –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ ===
students = {}
schedule = {}
bells = {}
dp_state = {
    "awaiting_file_for": None,   # "all" –∞–±–æ –∫–ª–∞—Å —è–∫ —Ä—è–¥–æ–∫
    "awaiting_bells_file": False
}

# ======== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è / –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è JSON ========
def load_json(file_path):
    if not os.path.exists(file_path):
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False, indent=4)
        return {}
    with open(file_path, "r", encoding="utf-8") as f:
        return json.load(f)

def save_json(file_path, data):
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def load_bells():
    global bells
    bells = load_json(BELLS_FILE)

def save_bells():
    save_json(BELLS_FILE, bells)

def load_data():
    global students, schedule, bells
    students = load_json(STUDENTS_FILE)
    schedule = load_json(SCHEDULE_FILE)
    bells = load_json(BELLS_FILE)
    print(f"‚úÖ –î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {len(students)} —É—á–Ω—ñ–≤, {len(schedule)} –∫–ª–∞—Å—ñ–≤, {len(bells)} –¥–∑–≤—ñ–Ω–∫—ñ–≤")

def save_data():
    save_json(STUDENTS_FILE, students)
    save_json(SCHEDULE_FILE, schedule)
    save_json(BELLS_FILE, bells)

# ======== –ö–Ω–æ–ø–∫–∏ ========
def main_menu(user_id: int):
    builder = InlineKeyboardBuilder()
    builder.button(text="üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", callback_data="today_schedule")
    builder.button(text="üóì –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å", callback_data="week_schedule")
    builder.button(text="‚è∞ –î–∑–≤—ñ–Ω–∫–∏", callback_data="bells_schedule")
    builder.button(text="‚öôÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∫–ª–∞—Å", callback_data="change_class")
    if user_id in ADMINS:
        builder.button(text="üìÉ –í–Ω–µ—Å—Ç–∏ –∑–º—ñ–Ω–∏ –≤ —Ä–æ–∑–∫–ª–∞–¥", callback_data="upload_schedule")
        builder.button(text="üîî –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤", callback_data="update_bells")
    builder.adjust(1, 1, 2, 1, 1)  # –∫–æ–∂–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É
    return builder.as_markup()

def class_buttons():
    builder = InlineKeyboardBuilder()
    for cls in range(5, 10):
        builder.button(text=f"{cls}", callback_data=f"class:{cls}")
    builder.adjust(1)
    return builder.as_markup()

# ======== –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É (—Ç–∏–∂–¥–µ–Ω—å) ========
def format_schedule(cls: str, schedule_data: dict) -> str:
    text = f"üìÖ –†–æ–∑–∫–ª–∞–¥ –¥–ª—è {cls} –∫–ª–∞—Å—É:\n\n"
    for day, lessons in schedule_data.items():
        text += f"üìå {day}:\n"
        for i, lesson in enumerate(lessons, start=1):
            text += f"   {i}. {lesson}\n"
        text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    return f"{text}"

# ======== –ù–û–í–ò–ô –í–Ü–ó–£–ê–õ: —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É –∑ –≥–æ–¥–∏–Ω–∞–º–∏ –¥–∑–≤—ñ–Ω–∫—ñ–≤ ========
def format_today_schedule(cls: str, day: str, lessons: list) -> str:
    
    header = f"üìÖ –†–æ–∑–∫–ª–∞–¥ –¥–ª—è {cls} –∫–ª–∞—Å—É –Ω–∞ {day}:\n"
    if not lessons:
        return header + "–°—å–æ–≥–æ–¥–Ω—ñ –∑–∞–Ω—è—Ç—å –Ω–µ–º–∞—î.\n"

    # –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –¥–∑–≤—ñ–Ω–∫—ñ–≤ ([(num, "08:55 - 09:35"), ...])
    sorted_bells = sorted(bells.items(), key=lambda kv: int(kv[0])) if bells else []

    lines = [header]
    for idx, lesson in enumerate(lessons, start=1):
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —á–∞—Å –¥–∑–≤—ñ–Ω–∫–∞
        if idx <= len(sorted_bells):
            timestr = sorted_bells[idx - 1][1]  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "08:55 - 09:35"
            # –°–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫/–∫—ñ–Ω–µ—Ü—å –ø–æ –¥–µ—Ñ—ñ—Å—É
            if "-" in timestr:
                parts = timestr.split("-")
                start = parts[0].strip()
                end = parts[1].strip()
            else:
                # –Ø–∫—â–æ —Ñ–æ—Ä–º–∞—Ç —ñ–Ω—à–∏–π ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü—ñ–ª–∏–π —Ä—è–¥–æ–∫ —è–∫ "start - end"
                start = timestr.strip()
                end = ""
            # –§–æ—Ä–º—É—î–º–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∏–π —Ä—è–¥–æ–∫ –∑ —á–∞—Å–æ–º
            if end:
                time_row = f"‚îÄ‚îÄ‚îÄ <code>{start}</code> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ <code>{end}</code> ‚îÄ‚îÄ‚îÄ"
            else:
                time_row = f"‚îÄ‚îÄ‚îÄ <code>{start}</code> ‚îÄ‚îÄ‚îÄ"
        else:
            time_row = "‚îÄ‚îÄ‚îÄ ‚Äî ‚îÄ‚îÄ‚îÄ"

	
        lines.append(time_row)
        lines.append(f"{idx}. <b>{lesson}</b>")


    lines.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    # –û–±'—î–¥–Ω–∞—Ç–∏ –≤ —Ç–µ–∫—Å—Ç
    return "\n".join(lines)



# ======== –§–æ—Ä–º–∞—Ç –¥–∑–≤—ñ–Ω–∫—ñ–≤ (—è–∫ –±—É–ª–æ) ========
def format_bells() -> str:
    if not bells:
        return "‚è∞ –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ."
    text = "‚è∞ –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤:\n\n"
    # —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ –Ω–æ–º–µ—Ä–æ–º (–∫–ª—é—á—ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ —Ä—è–¥–∫–∏)
    for number, timestr in sorted(bells.items(), key=lambda kv: int(kv[0])):
        text += f"{number}. {timestr}\n"
    return text

# ======== –í—ñ–¥–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É ========
async def send_schedule(user_id: int, cls: str, message: types.Message = None):
    if cls not in schedule:
        if message:
            await message.edit_text("–†–æ–∑–∫–ª–∞–¥ –¥–ª—è —Ç–≤–æ–≥–æ –∫–ª–∞—Å—É —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π.", reply_markup=main_menu(int(user_id)))
        else:
            await bot.send_message(user_id, "–†–æ–∑–∫–ª–∞–¥ –¥–ª—è —Ç–≤–æ–≥–æ –∫–ª–∞—Å—É —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π.", reply_markup=main_menu(int(user_id)))
        return
    text = format_schedule(cls, schedule[cls])
    if message:
        await message.edit_text(text, reply_markup=main_menu(int(user_id)))
    else:
        await bot.send_message(user_id, text, reply_markup=main_menu(int(user_id)))

# ======== /start ========
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = str(message.from_user.id)

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
    if message.from_user.id in ADMINS:
        await message.answer(
            f"<code>–í—ñ—Ç–∞—é, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ - {message.from_user.full_name}!</code>",
            reply_markup=main_menu(message.from_user.id),
            parse_mode="HTML"
        )
        return

    # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if user_id in students:
        cls = students[user_id]["class"]
        await message.answer(
            f"–í—ñ—Ç–∞—é –∑–Ω–æ–≤—É! –¢–≤—ñ–π –∫–ª–∞—Å: {cls}",
            reply_markup=main_menu(message.from_user.id)
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –∫–ª–∞—Å:",
            reply_markup=class_buttons()
        )

# ======== –í–∏–±—ñ—Ä –∫–ª–∞—Å—É ========
@dp.callback_query(lambda c: c.data and c.data.startswith("class:"))
async def class_choice(callback: types.CallbackQuery):
    cls = callback.data.split(":")[1]
    user_id = str(callback.from_user.id)
    students[user_id] = {
        "id": callback.from_user.id,
        "name": callback.from_user.full_name,
        "class": cls
    }
    save_data()
    await callback.message.edit_text(f"‚úÖ –¢–≤—ñ–π –∫–ª–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {cls}", reply_markup=main_menu(callback.from_user.id))

# ======== –ó–º—ñ–Ω–∏—Ç–∏ –∫–ª–∞—Å ========
@dp.callback_query(lambda c: c.data == "change_class")
async def change_class(callback: types.CallbackQuery):
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –∫–ª–∞—Å:", reply_markup=class_buttons())

# ======== –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ========
@dp.callback_query(lambda c: c.data == "today_schedule")
async def today_schedule(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    if user_id not in students and callback.from_user.id not in ADMINS:
        await callback.message.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –∫–ª–∞—Å —á–µ—Ä–µ–∑ /start")
        return

    cls = students[user_id]["class"] if user_id in students else None
    weekdays = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]
    today = weekdays[datetime.today().weekday()]

    if cls:
        if cls not in schedule:
            await callback.message.edit_text("–†–æ–∑–∫–ª–∞–¥ –¥–ª—è –≤–∞—à–æ–≥–æ –∫–ª–∞—Å—É —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.", reply_markup=main_menu(callback.from_user.id))
            return
        if today not in schedule[cls]:
            await callback.message.edit_text(f"–°—å–æ–≥–æ–¥–Ω—ñ ({today}) –∑–∞–Ω—è—Ç—å –Ω–µ–º–∞—î –∞–±–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π.", reply_markup=main_menu(callback.from_user.id))
            return
        lessons = schedule[cls][today]
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –≤—ñ–∑—É–∞–ª
        text = format_today_schedule(cls, today, lessons)
    else:
        text = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—Å—å–∫–∏–π –ø–µ—Ä–µ–≥–ª—è–¥: –æ–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ç–∏–∂–¥–µ–Ω—å."
    await callback.message.edit_text(text, reply_markup=main_menu(callback.from_user.id), parse_mode="HTML")

# ======== –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å ========
@dp.callback_query(lambda c: c.data == "week_schedule")
async def week_schedule(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    if user_id not in students and callback.from_user.id not in ADMINS:
        await callback.message.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –∫–ª–∞—Å —á–µ—Ä–µ–∑ /start")
        return

    cls = students[user_id]["class"] if user_id in students else None
    if cls:
        if cls not in schedule:
            await callback.message.edit_text("–†–æ–∑–∫–ª–∞–¥ –¥–ª—è –≤–∞—à–æ–≥–æ –∫–ª–∞—Å—É —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.", reply_markup=main_menu(callback.from_user.id))
            return
        text = format_schedule(cls, schedule[cls])
    else:
        text = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—Å—å–∫–∏–π –ø–µ—Ä–µ–≥–ª—è–¥: –æ–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥."
    await callback.message.edit_text(text, reply_markup=main_menu(callback.from_user.id))

# ======== –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ ========
@dp.callback_query(lambda c: c.data == "bells_schedule")
async def bells_schedule_callback(callback: types.CallbackQuery):
    await callback.message.edit_text(format_bells(), reply_markup=main_menu(callback.from_user.id))

# ======== –û–Ω–æ–≤–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ (–∞–¥–º—ñ–Ω) ========
@dp.callback_query(lambda c: c.data == "update_bells")
async def update_bells_callback(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMINS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    await callback.message.edit_text(
        "üì§ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –∑ –Ω–æ–≤–∏–º —Ä–æ–∑–∫–ª–∞–¥–æ–º –¥–∑–≤—ñ–Ω–∫—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ .txt (—Ä—è–¥–æ–∫: –Ω–æ–º–µ—Ä;—á–∞—Å)\n\n–ü—Ä–∏–∫–ª–∞–¥: 1;08:55 - 09:40",
        reply_markup=None
    )
    dp_state["awaiting_bells_file"] = True
    await callback.answer()

# ======== –ö–Ω–æ–ø–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É (–≤—Å—ñ / –∫–ª–∞—Å) ========
def update_schedule_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üõ† –û–Ω–æ–≤–∏—Ç–∏ –¥–ª—è –≤—Å—ñ—Ö", callback_data="update_all")
    for cls in range(5, 10):
        builder.button(text=f"{cls}", callback_data=f"update_class:{cls}")
    builder.adjust(1)  # –∫–æ–∂–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É
    return builder.as_markup()

@dp.callback_query(lambda c: c.data == "upload_schedule")
async def upload_schedule_callback(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMINS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    await callback.message.edit_text("üì§ –û–±–µ—Ä—ñ—Ç—å, —è–∫ –æ–Ω–æ–≤–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥:", reply_markup=update_schedule_menu())

@dp.callback_query(lambda c: c.data == "update_all")
async def update_all_schedule(callback: types.CallbackQuery):
    await callback.message.edit_text("üì§ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º —É —Ñ–æ—Ä–º–∞—Ç—ñ .txt –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ–º.", reply_markup=None)
    dp_state["awaiting_file_for"] = "all"

@dp.callback_query(lambda c: c.data and c.data.startswith("update_class:"))
async def update_class_schedule(callback: types.CallbackQuery):
    cls = callback.data.split(":")[1]
    await callback.message.edit_text(f"üì§ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º –¥–ª—è {cls} –∫–ª–∞—Å—É —É —Ñ–æ—Ä–º–∞—Ç—ñ .txt", reply_markup=None)
    dp_state["awaiting_file_for"] = cls

# ======== –û–±—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ ========
@dp.message(lambda m: m.document)
async def handle_document(message: types.Message):
    # —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ —Ñ–∞–π–ª–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    if message.from_user.id not in ADMINS:
        return

    if not message.document.file_name.endswith(".txt"):
        await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ .txt")
        return

    file_info = await bot.get_file(message.document.file_id)
    file_path = "schedule_uploaded.txt"
    await bot.download_file(file_info.file_path, destination=file_path)

    # –Ø–∫—â–æ –æ—á—ñ–∫—É—î–º–æ —Ñ–∞–π–ª –¥–∑–≤—ñ–Ω–∫—ñ–≤
    if dp_state.get("awaiting_bells_file"):
        new_bells = {}
        errors = []
        with open(file_path, "r", encoding="utf-8") as f:
            for lineno, line in enumerate(f, start=1):
                line = line.strip()
                if not line:
                    continue
                parts = line.split(";")
                if len(parts) != 2:
                    errors.append(f"–†—è–¥–æ–∫ {lineno}: –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç 1;08:55 - 09:35")
                    continue
                number, timestr = parts[0].strip(), parts[1].strip()
                if not number.isdigit():
                    errors.append(f"—Ä—è–¥–æ–∫ {lineno}: –Ω–æ–º–µ—Ä –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
                    continue
                new_bells[number] = timestr

        if errors:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∑–≤—ñ–Ω–∫—ñ–≤:\n" + "\n".join(errors))
            dp_state["awaiting_bells_file"] = False
            return

        # –û–Ω–æ–≤–ª—é—î–º–æ bells —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
        bells.update(new_bells)
        save_bells()
        dp_state["awaiting_bells_file"] = False
        await message.answer("‚úÖ –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_menu(message.from_user.id))
        return

    # ====== –Ü–Ω–∞–∫—à–µ ‚Äî —Ü–µ —Ñ–∞–π–ª –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º (–≤—Å—ñ / –∫–ª–∞—Å) ======
    awaiting = dp_state.get("awaiting_file_for")
    if not awaiting:
        await message.answer("‚ùå –ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, —â–æ —Ü–µ–π —Ñ–∞–π–ª –æ—á—ñ–∫—É–≤–∞–≤—Å—è.")
        return

    new_schedule = {}
    with open(file_path, "r", encoding="utf-8") as f:
        for line in f:
            parts = line.strip().split(";")
            if len(parts) != 3:
                continue
            cls_file, day, lessons = parts
            lessons_list = [l.strip() for l in lessons.split(",") if l.strip()]
            if cls_file not in new_schedule:
                new_schedule[cls_file] = {}
            new_schedule[cls_file][day] = lessons_list

    if awaiting == "all":
        schedule.update(new_schedule)
    else:
        if awaiting in new_schedule:
            schedule[awaiting] = new_schedule[awaiting]

    save_data()
    await message.answer("‚úÖ –†–æ–∑–∫–ª–∞–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç—ñ–ª—å–∫–∏ —Ç–∏–º, –∫–æ–≥–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    sent_count = 0
    for user_id, info in students.items():
        user_class = info.get("class")
        if awaiting == "all" or user_class == awaiting:
            try:
                await bot.send_message(
                    int(user_id),
                    "‚ÄºÔ∏èüîî –î–ª—è –≤–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–æ —Ä–æ–∑–∫–ª–∞–¥, –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –π–æ–≥–æ!",
                    reply_markup=main_menu(int(user_id))
                )
                sent_count += 1
            except:
                pass

    await message.answer(f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—ñ–≤ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {sent_count} —É—á–Ω—è–º.", reply_markup=main_menu(message.from_user.id))
    dp_state["awaiting_file_for"] = None

# ======== –ó–∞–ø—É—Å–∫ ========
async def main():
    load_data()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
